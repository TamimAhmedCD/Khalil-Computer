"use client";

import { useState } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { ChevronRightIcon, X } from "lucide-react";
import {
    Dialog,
    DialogClose,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from "../ui/dialog";
import { Button } from "../ui/button";
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "../ui/form";
import { Input } from "../ui/input";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "../ui/select";
import axios from "axios";

const formSchema = z.object({
    studentName: z.string().min(2, {
        message: "‡¶®‡¶æ‡¶Æ ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá",
    }),
    studentMobile: z.string().min(11, {
        message: "‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®",
    }),
    location: z.string().optional(),
    occupation: z.string().optional(),
    course: z.string().min(2, {
        message: "‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá",
    }),
});

const coursePrices = {
    "‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞": 1500,
    "‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®": 3000,
    "‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶è‡¶®‡ßç‡¶° ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü": 5000,
};

export function Admission({ triggerElements }) {
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isSuccess, setIsSuccess] = useState(false);
    const [selectedCoursePrice, setSelectedCoursePrice] = useState(null);

    const form = useForm({
        resolver: zodResolver(formSchema),
        defaultValues: {
            studentName: "",
            studentMobile: "",
            location: "",
            occupation: "",
            course: "",
        },
    });

    async function onSubmit(data) {
        setIsSubmitting(true);

        try {
            // Simulate API call
            const sendEmail = await axios.post("/api/mail/admission", data);
            await new Promise((resolve) => setTimeout(resolve, 1000));
            console.log("Form data:", data);
            setIsSuccess(true);
        } catch (error) {
            console.error("Error submitting form:", error);
        } finally {
            setIsSubmitting(false);
        }
    }

    return (
        <Dialog className="">
            <DialogTrigger asChild>
                {triggerElements}
            </DialogTrigger>
            <DialogContent className="w-full max-w-[800px] max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                    <div className="flex justify-center mb-2">
                        <div className="bg-primary-500 text-white p-3 rounded-full">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="24"
                                height="24"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                strokeWidth="2"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                className="h-6 w-6"
                            >
                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                            </svg>
                        </div>
                    </div>
                    <DialogTitle className="text-2xl font-bold text-primary-700 text-center">
                        ‡¶è‡¶ñ‡¶®‡¶á ‡¶≠‡¶∞‡ßç‡¶§‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
                    </DialogTitle>
                    <DialogDescription className="text-center">
                        ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶´‡¶∞‡ßç‡¶Æ‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶®‡¶ø‡¶ß‡¶ø ‡¶Ö‡¶§‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‚Äç‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá
                    </DialogDescription>
                    <div className="bg-white p-3 rounded-lg shadow-sm border border-primary-100 w-full max-w-md text-center">
                        <p className="text-primary-700">
                            üìû ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®: 01715409109
                        </p>
                    </div>
                </DialogHeader>

                {isSuccess ? (
                    <div className="py-6 text-center space-y-4">
                        <div className="mx-auto w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="24"
                                height="24"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                strokeWidth="2"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                className="text-primary-600 h-8 w-8"
                            >
                                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                <polyline points="22 4 12 14.01 9 11.01"></polyline>
                            </svg>
                        </div>
                        <h3 className="text-xl font-bold text-primary-700">
                            ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                        </h3>
                        <DialogClose>
                            <Button className="mt-4 bg-primary-600 hover:bg-primary-700 text-white">
                                ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
                            </Button>
                        </DialogClose>
                    </div>
                ) : (
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 py-4">
                            <FormField
                                control={form.control}
                                name="studentName"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel className="text-primary-700 font-medium">
                                            ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ *
                                        </FormLabel>
                                        <FormControl>
                                            <Input
                                                placeholder="‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                                                {...field}
                                                className="border-primary-200 focus-visible:ring-primary-300 rounded-lg"
                                            />
                                        </FormControl>
                                        <FormMessage className="text-red-500" />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="studentMobile"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel className="text-primary-700 font-medium">
                                            ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ *
                                        </FormLabel>
                                        <FormControl>
                                            <Input
                                                placeholder="‡ß¶‡ßßXXXXXXXXX"
                                                {...field}
                                                className="border-primary-200 focus-visible:ring-primary-300 rounded-lg"
                                            />
                                        </FormControl>
                                        <FormMessage className="text-red-500" />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="location"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel className="text-primary-700 font-medium">
                                            ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ
                                        </FormLabel>
                                        <FormControl>
                                            <Input placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®" {...field} />
                                        </FormControl>
                                        <FormMessage className="text-red-500" />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="occupation"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel className="text-primary-700 font-medium">
                                            ‡¶™‡ßá‡¶∂‡¶æ
                                        </FormLabel>
                                        <Select
                                            onValueChange={field.onChange}
                                            defaultValue={field.value}
                                        >
                                            <FormControl>
                                                <SelectTrigger className="w-full border-primary-200 focus:ring-primary-300 rounded-lg">
                                                    <SelectValue placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßá‡¶∂‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                                                </SelectTrigger>
                                            </FormControl>
                                            <SelectContent className="rounded-lg">
                                                <SelectItem value="‡¶õ‡¶æ‡¶§‡ßç‡¶∞/‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ">
                                                    ‡¶õ‡¶æ‡¶§‡ßç‡¶∞/‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ
                                                </SelectItem>
                                                <SelectItem value="‡¶ö‡¶æ‡¶ï‡¶∞‡¶ø‡¶ú‡ßÄ‡¶¨‡ßÄ">‡¶ö‡¶æ‡¶ï‡¶∞‡¶ø‡¶ú‡ßÄ‡¶¨‡ßÄ</SelectItem>
                                                <SelectItem value="‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡ßÄ">‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡ßÄ</SelectItem>
                                                <SelectItem value="‡¶ó‡ßÉ‡¶π‡¶ø‡¶£‡ßÄ">‡¶ó‡ßÉ‡¶π‡¶ø‡¶£‡ßÄ</SelectItem>
                                                <SelectItem value="‡¶™‡ßç‡¶∞‡¶¨‡¶æ‡¶∏‡ßÄ">‡¶™‡ßç‡¶∞‡¶¨‡¶æ‡¶∏‡ßÄ</SelectItem>
                                                <SelectItem value="‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø">‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø</SelectItem>
                                            </SelectContent>
                                        </Select>
                                        <FormMessage className="text-red-500" />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="course"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel className="text-primary-700 font-medium">
                                            ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® *
                                        </FormLabel>
                                        <Select
                                            onValueChange={(value) => {
                                                field.onChange(value);
                                                setSelectedCoursePrice(coursePrices[value] || null);
                                            }}
                                            defaultValue={field.value}
                                        >
                                            <FormControl>
                                                <SelectTrigger className="w-full border-primary-200 focus:ring-primary-300 rounded-lg">
                                                    <SelectValue placeholder="‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                                                </SelectTrigger>
                                            </FormControl>
                                            <SelectContent className="rounded-lg">
                                                <SelectItem value="‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞">‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞</SelectItem>
                                                <SelectItem value="‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®">‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®</SelectItem>
                                                <SelectItem value="‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶è‡¶®‡ßç‡¶° ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü">‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶è‡¶®‡ßç‡¶° ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü</SelectItem>
                                            </SelectContent>
                                        </Select>
                                        <FormMessage className="text-red-500" />
                                        {selectedCoursePrice && (
                                            <p className="text-primary-600 font-semibold text-center mt-2">
                                                ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶´‡¶ø: {selectedCoursePrice} ‡¶ü‡¶æ‡¶ï‡¶æ
                                            </p>
                                        )}
                                    </FormItem>
                                )}
                            />

                            <DialogFooter className="mt-6">
                                <Button
                                    type="submit"
                                    disabled={isSubmitting}
                                    className="bg-primary-600 hover:bg-primary-700 text-white font-bold py-2.5 px-6 rounded-full shadow-md transition-all duration-300 hover:scale-105 flex items-center gap-2 w-full"
                                >
                                    {isSubmitting ? "‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®..." : "‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®"}
                                    <ChevronRightIcon className="h-4 w-4" />
                                </Button>
                            </DialogFooter>
                        </form>
                    </Form>
                )}
            </DialogContent>
        </Dialog>
    );
}
