'use client'
import { useState } from 'react';
import { FilterBar } from '@/components/NoticeBoard/FilterBar';
import { NoticeCard } from '@/components/NoticeBoard/NoticeCard';
import { NoticeModal } from '@/components/NoticeBoard/NoticeBoardDetailsModal';
// import { NoticeModal } from './NoticeModal';

const sampleNotices = [
    {
        id: 1,
        title: '‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶∞‡ßÅ‡¶ü‡¶ø‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂',
        date: '‡ß®‡ß´ ‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞, ‡ß®‡ß¶‡ß®‡ß™',
        description: '‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø ‡¶Æ‡¶æ‡¶∏‡ßá‡¶∞ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶∞‡ßÅ‡¶ü‡¶ø‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡¶ï‡¶≤ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶®‡¶ø‡¶ú ‡¶®‡¶ø‡¶ú ‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡¶ø ‡¶¶‡ßá‡¶ñ‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶¨‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§',
        category: 'urgent',
        isNew: true,
        isPinned: true
    },
    {
        id: 2,
        title: '‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶ö‡¶æ‡¶≤‡ßÅ',
        date: '‡ß®‡ß© ‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞, ‡ß®‡ß¶‡ß®‡ß™',
        description: '‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶è‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶ó‡ßç‡¶∞‡¶π‡ßÄ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞‡¶æ ‡¶Ü‡¶ú‡¶á ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§',
        category: 'course',
        isNew: true,
        isPinned: false
    },
    {
        id: 3,
        title: '‡¶õ‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶ò‡ßã‡¶∑‡¶£‡¶æ',
        date: '‡ß®‡ß¶ ‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞, ‡ß®‡ß¶‡ß®‡ß™',
        description: '‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡ß®‡ß¨ ‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡ß® ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§ ‡¶∂‡ßÄ‡¶§‡¶ï‡¶æ‡¶≤‡ßÄ‡¶® ‡¶õ‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶∏‡¶ï‡¶≤ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶∏‡ßç‡¶•‡¶ó‡¶ø‡¶§‡•§',
        category: 'office',
        isNew: false,
        isPinned: false
    },
    {
        id: 4,
        title: '‡¶∏‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶ø‡¶§‡¶∞‡¶£',
        date: '‡ßß‡ßÆ ‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞, ‡ß®‡ß¶‡ß®‡ß™',
        description: '‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶Æ‡¶æ‡¶™‡ßç‡¶§ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶ø‡¶§‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶∏‡¶Ç‡¶∂‡ßç‡¶≤‡¶ø‡¶∑‡ßç‡¶ü ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞‡¶æ ‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá ‡¶è‡¶∏‡ßá ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§',
        category: 'general',
        isNew: false,
        isPinned: false
    },
    {
        id: 5,
        title: '‡¶≤‡ßç‡¶Ø‡¶æ‡¶¨ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡¶ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®',
        date: '‡ßß‡ß´ ‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞, ‡ß®‡ß¶‡ß®‡ß™',
        description: '‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶≤‡ßç‡¶Ø‡¶æ‡¶¨‡ßá‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶π‡¶¨‡ßá‡•§ ‡¶∏‡¶ï‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá‡¶∞ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá ‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§',
        category: 'urgent',
        isNew: false,
        isPinned: false
    },
    {
        id: 6,
        title: '‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶´‡¶ø ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º',
        date: '‡ßß‡ß® ‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞, ‡ß®‡ß¶‡ß®‡ß™',
        description: '‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Æ‡¶æ‡¶∏‡ßá‡¶∞ ‡¶´‡¶ø ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡ß©‡ßß ‡¶°‡¶ø‡¶∏‡ßá‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨ ‡¶´‡¶ø ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶™‡ßç‡¶∞‡¶Ø‡ßã‡¶ú‡ßç‡¶Ø ‡¶π‡¶¨‡ßá‡•§',
        category: 'office',
        isNew: false,
        isPinned: false
    }
];
export default function NoticeBoard() {
    const [selectedFilter, setSelectedFilter] = useState("all");
    const [selectedNotice, setSelectedNotice] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);

    const filteredNotices = sampleNotices.filter((notice) => {
        if (selectedFilter === "all") return true;
        return notice.category === selectedFilter;
    });

    // Sort notices: pinned first
    const sortedNotices = [...filteredNotices].sort((a, b) => {
        if (a.isPinned && !b.isPinned) return -1;
        if (!a.isPinned && b.isPinned) return 1;
        return 0;
    });

    const handleNoticeClick = (notice) => {
        setSelectedNotice(notice);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setSelectedNotice(null);
    };

    return (
        <section className="min-h-screen bg-background py-12">
            <div className="">
                {/* Header */}
                <div className="text-center mb-12 animate-fade-in">
                    <h1 className="text-4xl md:text-5xl font-bold font-bangla text-foreground mb-4">
                        üì¢ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶¨‡ßã‡¶∞‡ßç‡¶°
                    </h1>
                    <p className="text-lg text-muted-foreground font-bangla max-w-2xl mx-auto">
                        ‡¶ñ‡¶æ‡¶≤‡¶ø‡¶≤ ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶ì ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
                    </p>
                </div>

                {/* Filter Bar */}
                <FilterBar
                    selectedFilter={selectedFilter}
                    onFilterChange={setSelectedFilter}
                />

                {/* Notice Cards Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
                    {sortedNotices.map((notice, index) => (
                        <NoticeCard
                            key={notice.id}
                            notice={notice}
                            animationDelay={index * 0.1}
                            onReadMore={handleNoticeClick}
                        />
                    ))}
                </div>

                {filteredNotices.length === 0 && (
                    <div className="text-center py-12">
                        <p className="text-muted-foreground font-bangla text-lg">
                            ‡¶ï‡ßã‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§
                        </p>
                    </div>
                )}

                {/* Notice Details Modal */}
                <NoticeModal
                    notice={selectedNotice}
                    isOpen={isModalOpen}
                    onClose={handleCloseModal}
                />
            </div>
        </section>
    );
};
